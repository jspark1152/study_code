#실전 문제 : 개미 전사
#개미 전사는 무족한 식량을 충당코자 메뚜기 마을 식량창고를 습격하려 함
#메뚜기 마을에는 여러 개의 식량창고가 있는데 식량창고는 일직선으로 이어짐
#각 식량창고에는 정해진 수의 식량을 저장
#개미 전사는 식량창고를 선택적으로 약탈할 예정
#메뚜기 정찰병들은 일직선 상에 존재하는 식량창고 중 서로 인접한 식량창고가 공격받으면 바로 알아챌 수 있음
#들키지 않고 약탈하기 위해서는 최소한 한 칸 이상 떨어진 식량창고를 약탈
#식량창고 N개에 대한 정보가 주어졌을 때 얻을 수 있는 식량의 최댓값을 구하는 프로그램

#첫 줄에 식량창고의 개수 N 입력(3이상 100이하)
#둘째 줄에 공백으로 구분되어 각 식량창고에 저장된 식량의 개수 K 입력(0이상 1,000이하)

#출력 조건 : 첫 줄에 개미전사가 얻을 수 있는 식량의 최댓값 출력

print('식량 창고 수 N 입력')
N = int(input())

print('식량 개수 정보 입력')
food = list(map(int, input().split()))

print(max(food))

#알고리즘 구상
#1번째 선택 후 3번째 선택 또는 4번째 선택
#즉, i번째 이후 i+2 또는 i+3 선택(i+4번째는 선택하는 것이 의미가 없음)
#아니지 첫 스타트를 첫번째랑 두번째로

# 1 3 1 2 2 3 4 2
# 1 3 0 0 0 0 0 0

# 1 3 2 0 0 0 0 0

# 1 3 2 5 0 0 0 0

# 1 3 2 5 5 0 0 0

# 1 3 2 5 5 6 0 0

# 1 3 2 5 5 6 9 0

# 1 3 2 5 5 6 9 10

mark = [0] * (N)

mark[0] = food[0]
mark[1] = food[1]
for i in range(2, N):
    if i == 2:
        mark[i] = mark[i-2] + food[i]
    else:
        mark[i] = max(mark[i-2] + food[i], mark[i-3] + food[i])

print(max(mark))

#자체 평가 : 쉽진 않았음 제대로 된 듯함
#N개 창고를 나열하여 i번째마다 최대 취할수 있는 식량 개수를 누적시켜봄
#솔루션하고 살짝 다른듯? 거의 비슷